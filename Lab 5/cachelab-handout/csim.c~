//Cody Herndon
//A01393116

//David Petrizze
//A01625825

#include <stdlib.h>
#include <stdio.h>
#include <string.h>

#include "cachelab.h"

#define OP_BUFF_LEN 256

void parse_input(char** operation, long** address, int** size, int* ops, char* input)
{
  int index = 0;
  int hash = 0;
  char* delimiters = " ,\n\r";
  char* token;

  char* res_op = (char*)calloc(1, OP_BUFF_LEN);
  long* res_addr = (long*)calloc(1, OP_BUFF_LEN);
  int* res_size = (int*)calloc(1, OP_BUFF_LEN);
  int res_ops = 0;

  token = strtok(input, delimiters);
  while(token != NULL)
    {
      hash = index%3;
      //printf("index: %d\n\r", index);

      switch(hash)
	{
	case 0:
	  //instruction character
	  res_op[res_ops] = *token;
	  //printf("instruction: %c\n\r", res_op[res_ops]);
	  break;

	case 1:
	  //address (64-bit, hex)
	  res_addr[res_ops] = strtol(token, NULL, 16);
	  //printf("address: 0x%lx\n\r", res_addr[res_ops]);
	  break;

	case 2:
	  //size in bytes, decimal
	  res_size[res_ops] = (int)strtol(token, NULL, 10);
	  //printf("size: %d\n\r", res_size[res_ops]);
	  res_ops++;
	  break;

	default:
	  //???!!!?!?!!!
	  break;

	}
      
      index++;
      token = strtok(NULL, delimiters);

    }

  //finish up
  *operation = res_op;
  *address = res_addr;
  *size = res_size;
  *ops = res_ops;

}

int main()
{
  long lSize;
  FILE *fp;
  fp = fopen("traces/yi.trace", "r");

  if(fp == NULL)
    {
      perror("failed to read file...");
      exit(1);

    }

  fseek(fp, 0L, SEEK_END);
  lSize = ftell(fp);
  rewind(fp); //be kind,

  char* op = NULL;
  long* addr = NULL;
  int* size = NULL;
  int ops = 0;
  char* input = NULL;

  input = (char*)calloc(1, lSize+1);

  if(input == NULL)
    {
      perror("failed to allocate memory for input...");
      exit(1);

    }

  fread(input, lSize, 1, fp);

  parse_input(&op, &addr, &size, &ops, input);

  printf("num ops: %d\n\r", ops);
  printf("first instruction: %c\n\r", op[0]);

  fclose(fp);
  free(input);

  printSummary(0, 0, 0);
  return 0;

}
